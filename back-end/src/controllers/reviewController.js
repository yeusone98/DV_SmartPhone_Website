import { reviewModel } from '~/models/reviewModel'
import { StatusCodes } from 'http-status-codes'
import { ObjectId } from 'mongodb'
import { GET_DB } from '~/config/mongodb'

// üéØ T·∫°o ƒë√°nh gi√° s·∫£n ph·∫©m (CH·ªà CUSTOMER)
const createReview = async (req, res, next) => {
    try {
        const { product_id, rating, comment } = req.body
        const userId = req.jwtDecoded?._id
        const userRole = req.jwtDecoded?.role

        // Ch·∫∑n admin kh√¥ng ƒë∆∞·ª£c t·∫°o review
        if (userRole === 'admin') {
            return res.status(StatusCodes.FORBIDDEN).json({ message: 'Admin kh√¥ng th·ªÉ vi·∫øt ƒë√°nh gi√° s·∫£n ph·∫©m!' })
        }

        // ‚úÖ Truy xu·∫•t username t·ª´ userId
        const user = await GET_DB().collection('users').findOne({ _id: new ObjectId(userId) })
        if (!user) return res.status(StatusCodes.NOT_FOUND).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!' })

        const newReview = {
            product_id,
            customer_id: userId,
            username: user.displayName || user.username, // D√πng displayName n·∫øu c√≥
            rating,
            comment,
            createdAt: new Date()
        }

        const result = await reviewModel.createReview(newReview)
        res.status(StatusCodes.CREATED).json(result)
    } catch (error) {
        next(error)
    }
}

// L·∫•y danh s√°ch ƒë√°nh gi√° theo s·∫£n ph·∫©m
const getReviewsByProduct = async (req, res, next) => {
    try {
        const { productId } = req.params
        const reviews = await reviewModel.getReviewsByProduct(productId)
        res.status(StatusCodes.OK).json(reviews || [])
    } catch (error) {
        next(error)
    }
}

// üéØ X√≥a ƒë√°nh gi√° (Ch·ªâ customer s·ªü h·ªØu ho·∫∑c admin ƒë∆∞·ª£c x√≥a)
const deleteReview = async (req, res, next) => {
    try {
        const { reviewId } = req.params
        const userId = req.jwtDecoded._id
        const userRole = req.jwtDecoded.role

        // ‚úÖ T√¨m review theo ID
        const review = await GET_DB().collection('reviews').findOne({ _id: new ObjectId(reviewId) })
        if (!review) return res.status(StatusCodes.NOT_FOUND).json({ message: 'ƒê√°nh gi√° kh√¥ng t·ªìn t·∫°i!' })

        // Ch·ªâ admin ho·∫∑c ch√≠nh ch·ªß m·ªõi c√≥ th·ªÉ x√≥a
        if (review.customer_id !== userId && userRole !== 'admin') {
            return res.status(StatusCodes.FORBIDDEN).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ƒë√°nh gi√° n√†y!' })
        }

        // X√≥a review
        const result = await reviewModel.deleteReviewById(reviewId)
        res.status(StatusCodes.OK).json({ message: 'X√≥a ƒë√°nh gi√° th√†nh c√¥ng!' })
    } catch (error) {
        next(error)
    }
}

// üéØ Th√™m ph·∫£n h·ªìi v√†o review (CH·ªà ADMIN)
const addReply = async (req, res, next) => {
    try {
        const { reviewId } = req.params
        const { reply } = req.body
        const adminId = req.jwtDecoded._id
        const adminRole = req.jwtDecoded.role

        // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph·∫£n h·ªìi
        if (adminRole !== 'admin') {
            return res.status(StatusCodes.FORBIDDEN).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ph·∫£n h·ªìi ƒë√°nh gi√°!' })
        }

        // L·∫•y displayName c·ªßa admin
        const admin = await GET_DB().collection('users').findOne({ _id: new ObjectId(adminId) })
        if (!admin) return res.status(StatusCodes.NOT_FOUND).json({ message: 'Admin kh√¥ng t·ªìn t·∫°i!' })

        const replyData = {
            admin_id: adminId,
            admin_name: admin.displayName || admin.username,
            reply,
            createdAt: new Date()
        }

        const result = await reviewModel.addReplyToReview(reviewId, replyData)

        if (result) {
            res.status(StatusCodes.OK).json({ message: 'Th√™m ph·∫£n h·ªìi th√†nh c√¥ng!', reply: replyData })
        } else {
            res.status(StatusCodes.NOT_FOUND).json({ message: 'ƒê√°nh gi√° kh√¥ng t·ªìn t·∫°i!' })
        }
    } catch (error) {
        next(error)
    }
}

const deleteReply = async (req, res, next) => {
    try {
        const { reviewId, replyIndex } = req.params;
        const userId = req.jwtDecoded._id; // ID c·ªßa ng∆∞·ªùi ƒëang ƒëƒÉng nh·∫≠p
        const userRole = req.jwtDecoded.role; // Role c·ªßa user

        const review = await GET_DB()
            .collection('reviews')
            .findOne({ _id: new ObjectId(reviewId) });

        if (!review) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: 'Review not found!' });
        }

        // Ki·ªÉm tra ph·∫£n h·ªìi c√≥ t·ªìn t·∫°i kh√¥ng
        if (!review.replies || review.replies.length <= replyIndex) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: 'Reply not found!' });
        }

        const reply = review.replies[replyIndex];

        // Admin ch·ªâ ƒë∆∞·ª£c x√≥a ph·∫£n h·ªìi c·ªßa ch√≠nh m√¨nh
        if (userRole !== 'admin' || reply.admin_id !== userId) {
            return res.status(StatusCodes.FORBIDDEN).json({ message: 'You can only delete your own replies!' });
        }

        // X√≥a ph·∫£n h·ªìi kh·ªèi m·∫£ng replies
        const updatedReplies = review.replies.filter((_, index) => index !== Number(replyIndex));

        await GET_DB()
            .collection('reviews')
            .updateOne(
                { _id: new ObjectId(reviewId) },
                { $set: { replies: updatedReplies } }
            );

        res.status(StatusCodes.OK).json({ message: 'Reply deleted successfully!' });
    } catch (error) {
        next(error);
    }
};




export const reviewController = {
    createReview,
    getReviewsByProduct,
    deleteReview,
    addReply,
    deleteReply
}
